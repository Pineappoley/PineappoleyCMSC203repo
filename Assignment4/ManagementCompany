/*
 * Class: CMSC203 
 * Instructor:
 * Description: this class sets and gets the values for the properties in the managementcompany
 * Due: 03/18/2024
 * Platform/compiler:eclipse
 * I pledge that I have completed the programming 
 * assignment independently. I have not copied the code 
 * from a student or any source. I have not given my code 
 * to any student.
   Print your Name here: Dylan Avallone
*/

package assignment4;

public class ManagementCompany {
    public static final int MAX_PROPERTY = 5;
    public static final int MGMT_WIDTH = 10;
    public static final int MGMT_DEPTH = 10;

    private String name;
    private Plot plot;
    private String taxID;
    private double mgmFee;
    private int propertiesCount = 0;
    private Property[] properties;


    public ManagementCompany() {
        this.name = "";
        this.taxID = "";
        this.mgmFee = 0;
        this.plot = new Plot(0, 0, MGMT_WIDTH, MGMT_DEPTH);
        this.properties = new Property[MAX_PROPERTY];
    }

    public ManagementCompany(String name, String taxID, double mgmFee) {
        this();
        this.name = name;
        this.taxID = taxID;
        this.mgmFee = mgmFee;
    }

    public ManagementCompany(String name, String taxID, double mgmFee, int x, int y, int width, int depth) {
        this(name, taxID, mgmFee);
        this.plot = new Plot(x, y, width, depth);
    }

    public ManagementCompany(ManagementCompany otherCompany) {
        this(otherCompany.name, otherCompany.taxID, otherCompany.mgmFee, 
             otherCompany.plot.getX(), otherCompany.plot.getY(), 
             otherCompany.plot.getWidth(), otherCompany.plot.getDepth());
        this.properties = new Property[otherCompany.properties.length];
        System.arraycopy(otherCompany.properties, 0, this.properties, 0, otherCompany.properties.length);
        this.propertiesCount = otherCompany.propertiesCount;
    }

    public int addProperty(String name, String city, double rent, String owner) {
        return addProperty(new Property(name, city, rent, owner));
    }

    public int addProperty(String name, String city, double rent, String owner, int x, int y, int width, int depth) {
        return addProperty(new Property(name, city, rent, owner, x, y, width, depth));
    }

    public int addProperty(Property property) {
        if (propertiesCount >= MAX_PROPERTY) {
            return -1;
        }
        if (property == null) {
            return -2;
        }
        if (!plot.encompasses(property.getPlot())) {
            return -3;
        }
        for (int i = 0; i < propertiesCount; i++) {
            if (properties[i].getPlot().overlaps(property.getPlot())) {
                return -4;
            }
        }
        properties[propertiesCount] = property;
        propertiesCount++;
        return propertiesCount - 1;
    }

    public Property getHighestRentProperty() {
        Property maxRentProperty = null;
        double maxRent = 0;
        for (Property property : properties) {
            if (property != null && property.getRentAmount() > maxRent) {
                maxRent = property.getRentAmount();
                maxRentProperty = property;
            }
        }
        return maxRentProperty;
    }

    public double getMgmFeePer() {
        return mgmFee;
    }

    public String getName() {
        return name;
    }

    public Plot getPlot() {
        return plot;
    }

    public Property[] getProperties() {
        return properties;
    }

    public int getPropertiesCount() {
        return propertiesCount;
    }

    public String getTaxID() {
        return taxID;
    }

    public double getTotalRent() {
        double totalRent = 0;
        for (Property property : properties) {
            if (property != null) {
                totalRent += property.getRentAmount();
            }
        }
        return totalRent;
    }

    public boolean isManagementFeeValid() {
        return mgmFee >= 0 && mgmFee <= 100;
    }

    public boolean isPropertiesFull() {
        return propertiesCount == MAX_PROPERTY;
    }

    public void removeLastProperty() {
        if (propertiesCount > 0) {
            properties[propertiesCount - 1] = null;
            propertiesCount--;
        }
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("List of the properties for ").append(name).append(", taxID: ").append(taxID).append("\n");
        sb.append("______________________________________________________\n");
        for (int i = 0; i < propertiesCount; i++) {
            if (properties[i] != null) {
                sb.append(properties[i].toString()).append("\n");
            }
        }
        sb.append("______________________________________________________\n");
        sb.append("total management Fee: ").append(getTotalRent() * mgmFee / 100).append("\n");
        return sb.toString();
    }
}
